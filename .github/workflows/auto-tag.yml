name: Auto Tag

on:
  workflow_run:
    workflows: ["CI"]
    types:
      - completed
    branches: [main]

jobs:
  create-tags:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Check CI status
        if: github.event.workflow_run.conclusion != 'success'
        run: |
          echo "CI workflow did not complete successfully"
          echo "Conclusion: ${{ github.event.workflow_run.conclusion }}"
          exit 1

      - name: Check version changes and create tags
        run: |
          # workflow_runの場合、トリガーとなったコミットを使用
          TRIGGER_SHA=${{ github.event.workflow_run.head_sha }}

          # package.jsonの変更があったかチェック
          CHANGED_FILES=$(git diff --name-only ${TRIGGER_SHA}~1 ${TRIGGER_SHA} | grep 'apps/.*/package.json' || echo "")

          if [ -z "$CHANGED_FILES" ]; then
            echo "No package.json files changed in triggering commit"
            exit 0
          fi

          for file in $CHANGED_FILES; do
            echo "Processing $file"

            # アプリ名を抽出 (apps/discord/package.json -> discord)
            APP_NAME=$(echo $file | sed 's|apps/\([^/]*\)/package.json|\1|')

            # 新しいバージョンを取得（トリガーSHAから）
            NEW_VERSION=$(git show ${TRIGGER_SHA}:$file | jq -r '.version')

            # 既存のタグをチェック
            TAG_NAME="${APP_NAME}-v${NEW_VERSION}"

            if git tag -l | grep -q "^${TAG_NAME}$"; then
              echo "Tag $TAG_NAME already exists"
              continue
            fi

            # 前のバージョンと比較
            PREV_VERSION=$(git show ${TRIGGER_SHA}~1:$file | jq -r '.version' 2>/dev/null || echo "0.0.0")

            if [ "$NEW_VERSION" != "$PREV_VERSION" ]; then
              echo "Version changed for $APP_NAME: $PREV_VERSION -> $NEW_VERSION"

              # タグを作成（トリガーSHAに対して）
              git tag -a "$TAG_NAME" -m "Release $APP_NAME version $NEW_VERSION" ${TRIGGER_SHA}
              git push origin "$TAG_NAME"

              echo "Created and pushed tag: $TAG_NAME"
            else
              echo "No version change detected for $APP_NAME"
            fi
          done